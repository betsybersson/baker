{
    "contents" : "#' fucntion for cleaning PERCH data\n#'\n#' @param clean_options The list of options for cleaning PERCH data. The specific\n#' elements are as follows.\n#' \\code{case_def}: the variable name that is used for case definition.\n#' \\code{case_def_val}: The value of the case-definition variable.\n#' \\code{X_strat}: A vector of strings, each defining the variables used to\n#' stratify the data.\n#' \\code{X_strat_val}: A list of actual values that X_strat should take to\n#' get stratified data sets.\n#' \\code{Pathogen}: The vector of pathogen names. It has to be a subset of\n#' pathogen category information in the \\code{PathCatDir}.\n#' \\code{extra_X}: A vector of strings, each being the covariate name that one\n#' wants to have in the data set to be analyzed.\n#' \\code{RawMeasDir}: The file path to the raw data set\n#' \\code{newSite_write_Dir}: The file path where a new/cleaned data set for actual\n#'  will be written\n#' \\code{MeasDir}: The file path to the cleaned data set\n#' \\code{PathCatDir}: The file path to the pathogen category list (.csv)\n#'\n#' @return         list(Mobs,Y,X,JSS,Pathogen_MSS_ordered,Pathogen_cat)\n#'\n#' @export\nperch_data_clean <- function(clean_options){#         = \"C:/package_test/pathogen_category.csv\"){\n\n\n        case_def     <- clean_options$case_def\n        case_def_val <- clean_options$case_def_val\n        X_strat      <- clean_options$X_strat\n        X_strat_val  <- clean_options$X_strat_val\n        Pathogen     <- clean_options$Pathogen\n        extra_X      <- clean_options$extra_X\n        RawMeasDir   <- clean_options$RawMeasDir\n        newSite_write_Dir <- clean_options$newSite_write_Dir\n        MeasDir           <- clean_options$MeasDir\n        PathCatDir        <- clean_options$PathCatDir\n\n        # combine two sub-sites:\n        # 06NTH and 07STH  --> THA,\n        # 08MBA and 09DBA  --> BAN:\n\n        PERCH_data_with_newSITE <- combine_subsites(RawMeasDir,\n                                    subsites_list = list(c(\"06NTH\",\"07STH\"),\n                                                         c(\"08MBA\",\"09DBA\")),\n                                    newsites_vec  = c(\"THA\",\"BAN\"))\n\n        write.csv(PERCH_data_with_newSITE,newSite_write_Dir)\n\n        # list the pathogen categories:\n        Pathogen_cat <- read.csv(PathCatDir)\n\n        Specimen  <- c(\"NP\",\"B\")\n        Test      <- c(\"PCR\",\"CX\")\n\n        #X_strat        <- c(\"newSITE\",\"CASECONT\")\n\n        #newALLSITES <- c(\"01KEN\",\"02GAM\",\"03MAL\",\"04ZAM\",\"05SAF\",\"THA\",\"BAN\")\n\n        #sitename    <- newALLSITES[curr.site]\n        #Xval.not.disease.status   <- sitename #stratifying variable\n\n        datacase <- extract_data_raw(Pathogen,Specimen,Test,\n                                     c(X_strat,case_def),append(X_strat_val,case_def_val),\n                                     extra_covariates = extra_X,\n                                     MeasDir,PathCatDir,silent=TRUE)\n        #write.csv(datacase,\"C:/package_test/datacase.csv\")\n\n        datactrl <- extract_data_raw(Pathogen,Specimen,Test,\n                                     c(X_strat,\"CASECONT\"),append(X_strat_val,2),\n                                     extra_covariates = extra_X,\n                                     MeasDir,PathCatDir,silent=TRUE)\n        #write.csv(datactrl,\"C:/package_test/datactrl.csv\")\n\n        # deal with incompleteness of measurement data:\n\n        # get pathogens that have many BcX measurements:\n        SS_index  <- which(colMeans(is.na(datacase$BCX))<.9)\n        cat(\"Pathogens that have blood culture measurements:\",\"\\n\",\n            Pathogen[SS_index],\"\\n\")\n        JSS       <- length(SS_index)\n        Jfull     <- length(Pathogen)\n        MSS_avail_index <- c(SS_index,(1:Jfull)[-SS_index])\n\n        # get case/control indices who have complete observations on NPPCR&BCX(cases),\n        # or NPPCR(ctrls):\n        complete_case_index <- which(rowMeans(is.na(datacase$NPPCR))==0 &\n                                       rowMeans(is.na(datacase$BCX[,SS_index]))==0)\n        complete_ctrl_index <- which(rowMeans(is.na(datactrl$NPPCR))==0)\n\n        # actual complete numbers of cases/controls:\n        Nd  <- length(complete_case_index)\n        Nu  <- length(complete_ctrl_index)\n\n        M_NPPCR    <- rbind(datacase$NPPCR[complete_case_index,],\n                            datactrl$NPPCR[complete_ctrl_index,])\n        Y          <- c(rep(1,Nd),rep(0,Nu))\n        M_BCX_ctrl <- as.data.frame(matrix(NA,nrow=Nu,ncol=length(Pathogen)))\n        colnames(M_BCX_ctrl) <- paste(Pathogen,\"BCX\",sep=\"_\")\n        M_BCX     <- rbind(datacase$BCX[complete_case_index,],M_BCX_ctrl)\n\n        Rdate.case <- as.Date(datacase$ENRLDATE[complete_case_index], \"%d%B%Y\")\n        Rdate.ctrl <- as.Date(datactrl$ENRLDATE[complete_ctrl_index], \"%d%B%Y\")\n\n        uniq.month.case <- unique(paste(month(Rdate.case),year(Rdate.case),sep=\"-\"))\n        uniq.month.ctrl <- unique(paste(month(Rdate.ctrl),year(Rdate.ctrl),sep=\"-\"))\n\n        symm.diff.dates <- as.set(uniq.month.case)%D% as.set(uniq.month.ctrl)\n        if (length(symm.diff.dates)!=0){\n          cat(\"Cases and controls have different enrollment months:\",\"\\n\")\n          print(symm.diff.dates)\n        }\n\n        # observations unordered with respect to date:\n        datobs <- cbind(M_NPPCR,\n                        M_BCX,\n                        Y = c(rep(1,Nd),rep(0,Nu)),\n                        newSITE  = c(datacase$newSITE[complete_case_index],\n                                     datactrl$newSITE[complete_ctrl_index]),\n                        raw.date = c(Rdate.case,Rdate.ctrl),\n                        patid    = c(as.character(datacase$patid[complete_case_index]),\n                                     as.character(datactrl$patid[complete_ctrl_index])),\n                        AGECAT   = c(datacase$AGECAT[complete_case_index],\n                                     datactrl$AGECAT[complete_ctrl_index]),\n                        HIV      = c(datacase$HIV[complete_case_index],\n                                     datactrl$HIV[complete_ctrl_index])\n        )\n\n        datobs <- as.data.frame(datobs)\n\n        # separately order cases and controls according to enrollment dates, and\n        # place cases' data on the top:\n        datobs <- datobs[c(order(Rdate.case),Nd+order(Rdate.ctrl)),]\n\n        # create the list of measurements\n        # look for pathogens that have more than one positives in BCX:\n        cat(\"Total positives in MSS:\",\"\\n\")\n        print(table(rowSums(M_BCX[1:Nd,SS_index])))\n        BCX_more_than_one_index <- which(rowSums(M_BCX[1:Nd,SS_index])>1)\n        if (length(BCX_more_than_one_index)>0){\n          cat(\"Removed case(s) who have more than one positive in BCX:\",\"\\n\")\n          print(datobs$patid[BCX_more_than_one_index])\n          print(M_BCX[BCX_more_than_one_index,SS_index])\n\n          Mobs   <- list(MBS = M_NPPCR[-BCX_more_than_one_index,MSS_avail_index],\n                         MSS = M_BCX[-BCX_more_than_one_index,MSS_avail_index],\n                         MGS = NA)\n          Y      <- datobs$Y[-BCX_more_than_one_index]\n          X      <- datobs[-BCX_more_than_one_index,c(\"raw.date\",\"AGECAT\",\"HIV\")]\n          Nd     <- Nd - length(BCX_more_than_one_index)\n        } else {\n          Mobs   <- list(MBS = M_NPPCR[,MSS_avail_index],\n                         MSS = M_BCX[,MSS_avail_index],\n                         MGS = NA)\n          Y      <- datobs$Y\n          X      <- datobs[,c(\"raw.date\",\"AGECAT\",\"HIV\")]\n        }\n\n        #order the pathogens so that those have SS data comes first:\n        Pathogen_MSS_ordered = Pathogen[MSS_avail_index]\n        #get the list of pathogen categories for each of the above ordered pathogens:\n        path_cat_ind <- sapply(1:Jfull,function(i)\n                                   which(Pathogen_cat$X==Pathogen_MSS_ordered[i]))\n        list(Mobs=Mobs,Y=Y,X=X,\n             JSS=JSS,\n             Pathogen_MSS_ordered = Pathogen_MSS_ordered,\n             Pathogen_cat = Pathogen_cat[path_cat_ind,])\n}\n",
    "created" : 1412999236229.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1218116238",
    "id" : "941F997E",
    "lastKnownWriteTime" : 1412999242,
    "path" : "~/Dropbox/ZW/working_projects/PERCH/R_package/nplcm/R/perch_data_clean.R",
    "project_path" : "R/perch_data_clean.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}