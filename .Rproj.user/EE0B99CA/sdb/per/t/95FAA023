{
    "contents" : "#' Plot figures for nested partially-latent model results\n#'\n#' Visualize the model outputs for communicating how data inform the\n#' DN: current implementation: nplcm, BrS and SS.\n#'\n#' @param DIR_NPLCM directory of results\n#'\n#' @param ss_upperlimit The upper limit of horizontal bar for the silver-standard\n#' subpanel (the middle panel). The default value is .25.\n#'\n#' @param eti_upperlimit The upper limit of horizontal bar for the etiology\n#' posterior subpanel (the rightmost panel). The default value is .4\n#' @return None\n#' @export\n#'\n#'\n\nnplcm_plot_three_panel <- function(DIR_NPLCM,ss_upperlimit=.25,eti_upperlimit=.4){#BEGIN function\n           #read in data\n            bugs.dat <- dget(paste(DIR_NPLCM,\"data.txt\",sep=\"/\"))\n            for (bugs.variable.name in names(bugs.dat)) {\n              if (!is.null(dim(bugs.dat[[bugs.variable.name]]))) {\n                dim(bugs.dat[[bugs.variable.name]]) <- rev(dim(bugs.dat[[bugs.variable.name]]))\n                bugs.dat[[bugs.variable.name]] <- aperm(bugs.dat[[bugs.variable.name]])\n              }\n              assign(bugs.variable.name, bugs.dat[[bugs.variable.name]])\n            }\n\n            model_options  <- dget(paste(DIR_NPLCM,\"model_options.txt\",sep=\"/\"))\n            #compatibility checking:\n            if (length(model_options$M_use)!=length(model_options$TPR_prior)){\n              stop(\"The number of measurement source(s) is different from\n                         the number of TPR prior option!\n                         Make them equal, and match with order!\")\n            }\n\n            #some data preparation:\n            Nd <- bugs.dat$Nd\n            Nu <- bugs.dat$Nu\n\n            Y = c(rep(1,Nd),rep(0,Nu))\n\n            model_data_source <- rep(NA,3)\n            names(model_data_source) <- c(\"MBS\",\"MSS\",\"MGS\")\n            model_data_source[1] <- c(\"no\",\"yes\")[\"BrS\"%in%model_options$M_use+1]\n            model_data_source[2] <- c(\"no\",\"yes\")[\"SS\"%in%model_options$M_use+1]\n            model_data_source[3] <- c(\"no\",\"yes\")[\"GS\"%in%model_options$M_use+1]\n\n            pathogen_list <-model_options$pathogen_list\n\n            Jfull         <- length(pathogen_list)\n\n            #reading nplcmn outputs:\n            res_nplcm <- read.coda(paste(DIR_NPLCM,\"coda1.txt\",sep=\"/\"),\n                                   paste(DIR_NPLCM,\"codaIndex.txt\",sep=\"/\"),quiet=TRUE)\n\n            Jfull <- length(grep(\"pEti\",colnames(res_nplcm)))\n\n            # extract and process some data and posterior samples:\n            SubVarName <- rep(NA,Jfull)\n            for (j in 1:Jfull){\n              SubVarName[j] = paste(\"pEti\",\"[\",j,\"]\",sep=\"\")\n            }\n\n            #get etiology fraction MCMC samples:\n            pEti_mat   <- res_nplcm[,SubVarName]\n            pEti_mean  <- colMeans(pEti_mat)\n            pEti_mean0 <- pEti_mean\n\n            # order the pathogens by posterior mean:\n            ord <- order(pEti_mean)\n            pathogens_ord <- model_options$pathogen_list[ord]\n            pEti_mean_ord <- pEti_mean[ord]\n            pEti_mat_ord  <- pEti_mat[,ord]\n\n            # quantiles for etiology: outer is 97.5% CI, inner is 50% CI\n\n            pEti_q1   <- apply(pEti_mat,2,quantile,probs=0.025)[ord]\n            pEti_q2   <- apply(pEti_mat,2,quantile,probs=0.975)[ord]\n            pEti_innerq1   <- apply(pEti_mat,2,quantile,probs=0.25)[ord]\n            pEti_innerq2   <- apply(pEti_mat,2,quantile,probs=0.75)[ord]\n\n            ncase <- sum(Y==1)\n            nctrl <- sum(Y==0)\n\n            MBS <- bugs.dat$MBS\n            colnames(MBS) <-model_options$pathogen_list\n\n            tmp.case <- binom.confint(colSums(MBS[1:ncase,]),\n                                      ncase, conf.level = 0.95, methods = \"ac\")[ord,]\n            tmp.ctrl <- binom.confint(colSums(MBS[-(1:ncase),]),\n                                      nctrl, conf.level = 0.95, methods = \"ac\")[ord,]\n\n            # case and control positive rate, lower and upper limit\n            Bcomp   <- rbind(round(tmp.case$mean,5),round(tmp.ctrl$mean,5))\n            Bcomp_q1 <- rbind(tmp.case[,c(\"lower\")],tmp.ctrl[,c(\"lower\")])\n            Bcomp_q2 <- rbind(tmp.case[,c(\"upper\")],tmp.ctrl[,c(\"upper\")])\n\n            #posterior distribution of TPR and FPR:\n\n            if (model_options$k_subclass>1){\n              # nplcm (need to marginalize over subclasses to calculate marginal TPR):\n                  theta_mat  <- (res_nplcm[,grep(\"ThetaBS.marg\",colnames(res_nplcm))])[,ord]\n                  theta_mean <- colMeans(theta_mat)\n\n                  #posterior distribution of FPR\n                  psi_mat  <- (res_nplcm[,grep(\"PsiBS.marg\",colnames(res_nplcm))])[,ord]\n                  psi_mean <- colMeans(psi_mat)\n\n                  psi_mat.case = array(NA,c(nrow(res_nplcm),Jfull,Jfull),\n                                        dimnames = list(NULL,1:Jfull,1:Jfull))\n\n                  psi_mat.case.tmp = (res_nplcm[,grep(\"PsiBS.case\",colnames(res_nplcm))])\n                  for (j in 1:Jfull){\n                    for (s in 1:Jfull){\n                      tmp.nm = paste0(\"PsiBS.case\",\"[\",j,\",\",s,\"]\")\n                      ind.tmp = which(colnames(psi_mat.case.tmp)==tmp.nm)\n                      psi_mat.case[,j,s] = psi_mat.case.tmp[,ind.tmp]\n                    }\n                  }\n\n                  psi_mat.case.ord = psi_mat.case[,ord,ord]\n\n                  # model fitted postive rate for each pathogen\n                  fittedmean_case <- sapply(1:Jfull,function(s) mean(pEti_mat_ord[,s]*theta_mat[,s]+\n                                                   rowSums(pEti_mat_ord[,-s]*psi_mat.case.ord[,s,-s])))\n                  fittedmean_control <- psi_mean\n            } else {\n              # plcm (just obtain TPR and FPR estimates):\n                  theta_mat <- (res_nplcm[,grep(\"thetaBS\",colnames(res_nplcm))])[,ord]\n                  theta_mean <- colMeans(theta_mat)\n\n                  #posterior distribution of FPR\n                  psi_mat  <- (res_nplcm[,grep(\"psiBS\",colnames(res_nplcm))])[,ord]\n                  psi_mean <- colMeans(psi_mat)\n\n                  ## model fitted postive rate for each pathogen\n                  fittedmean_case <- sapply(1:Jfull,\n                                            function(s) mean(pEti_mat_ord[,s]*theta_mat[,s]+\n                                                               (1-pEti_mat_ord[,s])*psi_mat[,s]))\n                  fittedmean_control <- psi_mean\n\n            }\n\n\n            ## start plotting:\n            # if only BrS data is used:\n            if (model_data_source[1]==\"yes\" &\n                    model_data_source[2]==\"no\" &\n                     model_data_source[3]==\"no\"){\n              layout(matrix(c(1,2),1,2,byrow = TRUE),\n                     widths=c(4,4),heights=c(8))\n            }\n\n            # if both BrS and SS data are used:\n            if (model_data_source[1]==\"yes\" &\n                    model_data_source[2]==\"yes\" &\n                      model_data_source[3]==\"no\"){\n\n              layout(matrix(c(1,2,3),1,3,byrow = TRUE),\n                     widths=c(3,2,3),heights=c(8))\n            }\n            cexval=1\n            srtval=0\n            ## BEGIN subplot 1: BrS Info -----------------------------------------------\n            top2 = 1.3\n            op<-par(mar=c(5.1,4.1,4.1,0))\n            plotat = seq(0.5,Jfull+0.5,by=1/4)[-(c(1,(1:Jfull)*4+1))]\n            #plot case control positive rates, and fitted case rates\n            plot(c(rbind(fittedmean_case,Bcomp)),plotat,yaxt=\"n\",xlim=c(0,top2),\n                 ylim=c(0.5,Jfull+.5),xaxt=\"n\",\n                 ylab=\"\",xlab=\"probability\",\n                 pch = c(rbind(rep(2,Jfull),rep(20,Jfull),rep(20,Jfull))),\n                 col=c(rbind(rbind(rep(1,Jfull),rep(\"dodgerblue2\",Jfull),rep(\"dodgerblue2\",Jfull)))),\n                 cex = c(rbind(rep(1,Jfull),rep(2,Jfull),rep(2,Jfull))))\n\n            #add axis labels on the left:\n            axis(2,at = plotat,labels=rep(c(\"\",\"case\",\"ctrl\"),Jfull),las=2)\n            #add ticks from 0 to 1 for x-bar:\n            axis(1,at = c(0,0.2,0.4,0.6,0.8,1),labels= c(0,0.2,0.4,0.6,0.8,1),las=1)\n\n            #plot TPR posterior mean, and upper CI bound for case/control rates:\n            points(c(rbind(theta_mean,Bcomp_q2)),plotat,\n                   pch=c(rbind(rep(\"+\",Jfull),rep(\"|\",Jfull),rep(\"|\",Jfull))),\n                   cex=c(rbind(rep(2,Jfull),rep(1,Jfull),rep(1,Jfull))),\n                   col=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))))\n            #plot FPR posterior mean, and lower CI bound for case/control rates:\n            points(c(rbind(psi_mean,Bcomp_q1)),plotat,\n                   pch=c(rbind(rep(\"*\",Jfull),rep(\"|\",Jfull),rep(\"|\",Jfull))),\n                   cex=c(rbind(rep(2,Jfull),rep(1,Jfull),rep(1,Jfull))),\n                   col=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))))\n            abline(h=seq(1.5,Jfull-.5,by=1),lty=2,lwd=0.5,col=\"blue\")\n            abline(v=1,lty=2,lwd=.5)\n\n            ## conditional odds ratios\n            COR = function(brs.data,nd,pathogens){\n              y = rep(c(1,0),times=c(nd,nrow(brs.data)-nd))\n              #X = matrix(NA,nrow=nrow(brs.data),ncol=length(pathogens))\n              x.nm   = paste(pathogens)\n              #colnames(X) = x.nm\n              #for (j in 1:length(pathogens)){\n              #  X[,j] = brs.data[,x.nm[j]]\n              #}\n              dat.reg = as.data.frame(cbind(y,brs.data))\n              form = as.formula(paste0(\"y~\",paste(x.nm,collapse=\"+\")))\n              fit = glm(form,data=dat.reg,family=binomial)\n              res = cbind(exp(suppressMessages(confint(fit))),exp(fit$coef))[-1,]\n            }\n\n            tmp = COR(MBS,ncase,pathogens_ord)\n            #plot conditional odds ratio on the right:\n            for (s in (1:Jfull)){\n              L=round(tmp[s,1],1)\n              C=round(tmp[s,3],1)\n              R=round(tmp[s,2],1)\n              text(top2-0.12,s+1/(2*Jfull),C,cex=1.5)\n              text(top2-0.12,s-.2,paste(c(L,\"   \",R),collapse=\" \"),cex=1.2)\n            }\n            legend(\"topright\",\"conditional OR\",bty=\"n\")\n\n            counter = 0\n            #each row, connect FPR and TPR posterior means\n            for (s in 1:(3*Jfull)){\n              segments(y0=plotat[s],x0=c(rbind(psi_mean,Bcomp_q1))[s],\n                       y1=plotat[s],x1=c(rbind(theta_mean,Bcomp_q2))[s],\n                       lty=ifelse((s-1)%%3<1,4,1))\n              if ((s-1)%%3>=1){\n                counter=counter+1\n                tmp.hpos = ifelse(c(Bcomp_q2)[counter]+0.15>0.95,c(Bcomp_q1)[counter]-0.2,c(Bcomp_q2)[counter]+0.15 )\n                text(tmp.hpos,plotat[s],paste0(round(100*c(Bcomp),1)[counter],\"%\"),srt=srtval,cex=cexval)\n              }\n            }\n\n            for (s in 1:(Jfull)){\n              segments(y0=plotat[3*s-1],x0=c(rbind(fittedmean_case,Bcomp))[3*s-1],\n                       y1=plotat[3*s],x1=c(rbind(fittedmean_case,Bcomp))[3*s],col=\"dodgerblue2\",lwd=2)\n            }\n            # put prior shapes on bronze-standard sensitivity\n\n            TPR_prior_list <- TPR_prior_set(model_options)\n\n            # if both BrS and SS data are used:\n            if (model_data_source[1]==\"yes\" &\n                  model_data_source[2]==\"no\" &\n                  model_data_source[3]==\"no\"){\n                  alphaB <- TPR_prior_list$alphaB\n                  betaB <- TPR_prior_list$betaB\n            }\n            # if both BrS and SS data are used:\n            if (model_data_source[1]==\"yes\" &\n                  model_data_source[2]==\"yes\" &\n                   model_data_source[3]==\"no\"){\n                    alphaB <- TPR_prior_list$alphaB\n                    betaB <- TPR_prior_list$betaB\n                    alphaS <- TPR_prior_list$alphaS\n                    betaS <- TPR_prior_list$betaS\n\n                    used_cat <- TPR_prior_list$used_cat\n            }\n\n\n\n            for (s in 1:Jfull){\n              tmp = rbeta(10000,alphaB[ord[s]],betaB[ord[s]])\n              boxplot(tmp,at = s-0.45, boxwex=1/10 , col=\"gray\",add=TRUE,horizontal=TRUE,outline=FALSE,xaxt=\"n\")\n              tmp.post = as.matrix(theta_mat)[,s]\n              boxplot(tmp.post,at = s-0.35,boxwex=1/10,add=TRUE,horizontal=TRUE,outline=FALSE,xaxt=\"n\")\n            }\n            axis(2,at=(1:Jfull)-.45,label=rep(\"\",Jfull),las=2,cex.axis=.5)\n            axis(2,at=(1:Jfull)-.35,label=rep(\"\",Jfull),las=2,cex.axis=.5)\n\n            mtext(expression(underline(\"BrS\")),line=1,cex=1.8)\n            par(op)\n            ## END subplot 1: BrS Info--------------------------------------------------\n\n            # if both BrS and SS data are used:\n            if (model_data_source[1]==\"yes\" &\n                  model_data_source[2]==\"yes\" &\n                    model_data_source[3]==\"no\"){\n\n                    ## BEGIN subplot 2: SS Info -----------------------------------------------\n\n                    ## check DN about how to warn user about missing some BCX:\n                    SSdat = bugs.dat$MSS\n\n                    SS_index  <- which(colMeans(is.na(SSdat))<.9)\n                    JSS       <- length(SS_index)\n\n                    ord.SS = order(pEti_mean0[1:JSS])\n                    ind.SS = rep(NA,JSS) # tells where the the SS row should go\n                    for (j in 1:JSS){\n                      ind.SS[j] = which(ord==j)\n                    }\n\n                    tmpSS.case = binom.confint(colSums(SSdat[,1:JSS]), nrow(SSdat),\n                                              conf.level = 0.95, methods = \"ac\")\n                    SScomp = rbind(round(tmpSS.case$mean,5),rep(NA,JSS))\n                    SScomp_q1 = rbind(tmpSS.case[,c(\"lower\")],rep(NA,JSS))\n                    SScomp_q2 = rbind(tmpSS.case[,c(\"upper\")],rep(NA,JSS))\n\n                    theta_matSS = (res_nplcm[,grep(\"thetaSS\",colnames(res_nplcm))])\n                    theta_meanSS = colMeans(theta_matSS)\n\n                    theta_matSS_q1=apply(theta_matSS,2,quantile,0.025)\n                    theta_matSS_q2=apply(theta_matSS,2,quantile,0.975)\n\n                    fittedmean_SS_pos = sapply(1:JSS, function(s)\n                          mean(pEti_mat_ord[,ind.SS[s]]*theta_matSS[,s]))\n                    # note that here we used ind.SS[] to map back to the compelte\n                    # vector of pathogens.\n\n                    par(mar=c(5.1,0,4.1,0))\n\n                    plotat = seq(0.5,Jfull+0.5,by=1/4)[-(c(1,(1:Jfull)*4+1))]\n                    #plotat.short = plotat[1:length(c(rbind(thetameanG,Gcomp)))]\n                    plotat.calc = function(j) {c(3*j-2,3*j-1,3*j)}\n                    plotat.short = rep(NA,JSS*3)\n                    for (j in 1:JSS){\n                      plotat.short[c(3*j-2,3*j-1,3*j)] = plotat[plotat.calc(ind.SS[j])]\n                    }\n\n\n                    top3 = ss_upperlimit\n                    plot(c(rbind(theta_meanSS,SScomp)),plotat.short,yaxt=\"n\",xlim=c(0,top3),\n                         ylim=c(0.5,Jfull+.5),#xaxt=\"n\",\n                         ylab=\"\",xlab=\"probability\",\n                         pch = c(rbind(rep(20,Jfull),rep(20,Jfull),rep(20,Jfull))),\n                         col=c(rbind(rbind(rep(1,Jfull),rep(\"blue\",Jfull),rep(1,Jfull)))),\n                         cex = c(rbind(rep(1,Jfull),rep(2,Jfull),rep(2,Jfull))))\n                    #axis(1,at = seq(0,top3,len=10),labels= seq(0,top3,len=10),las=1)\n                    points(c(rbind(fittedmean_SS_pos,matrix(\"\",nrow=2,ncol=JSS))),plotat.short,\n                             yaxt=\"n\",xlim=c(0,top3),\n                           ylim=c(0.5,Jfull+.5),xaxt=\"n\",\n                           ylab=\"\",#xlab=\"Gold Positive Rate\",\n                           pch = c(rbind(rep(2,Jfull),rep(NA,Jfull),rep(NA,Jfull))),\n                           col=c(rbind(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull)))),\n                           cex = c(rbind(rep(1,Jfull),rep(2,Jfull),rep(2,Jfull))))\n\n                    #axis(2,at = plotat.short,labels=rep(c(\"TPR-G\",\"case\",\"ctrl\"),JSS),las=2)\n                    points(c(rbind(theta_matSS_q2,SScomp_q2)),plotat.short,\n                           pch=c(rbind(rep(\"|\",Jfull),rep(\"|\",Jfull),rep(\"|\",Jfull))),\n                           cex=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))),\n                           col=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))))\n                    points(c(rbind(theta_matSS_q1,SScomp_q1)),plotat.short,\n                           pch=c(rbind(rep(\"|\",Jfull),rep(\"|\",Jfull),rep(\"|\",Jfull))),\n                           cex=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))),\n                           col=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))))\n\n                    #inner 25%-75%\n                    theta_matSS_innerq1=apply(theta_matSS,2,quantile,0.25)\n                    theta_matSS_innerq2=apply(theta_matSS,2,quantile,0.75)\n                    points(c(rbind(theta_matSS_innerq1,SScomp_q1)),plotat.short,\n                           pch=c(rbind(rep(\"[\",Jfull),rep(\"|\",Jfull),rep(\"|\",Jfull))),\n                           cex=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))),\n                           col=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))))\n                    points(c(rbind(theta_matSS_innerq2,SScomp_q1)),plotat.short,\n                           pch=c(rbind(rep(\"]\",Jfull),rep(\"|\",Jfull),rep(\"|\",Jfull))),\n                           cex=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))),\n                           col=c(rbind(rep(1,Jfull),rep(1,Jfull),rep(1,Jfull))))\n                    counter = 0\n                    for (s in 1:length(plotat.short)){\n                      segments(y0=plotat.short[s],x0=c(rbind(theta_matSS_innerq1,SScomp_q1))[s],\n                               y1=plotat.short[s],x1=c(rbind(theta_matSS_innerq2,SScomp_q2))[s],\n                               col=\"black\",\n                               lwd=1)\n                    }\n\n                    # row separation lines\n                    abline(h=seq(1.5,Jfull-.5,by=1)[ind.SS],lty=2,lwd=0.5,col=\"blue\")\n                    abline(h=seq(1.5,Jfull-.5,by=1)[ind.SS]-1,lty=2,lwd=0.5,col=\"blue\")\n\n\n                    counter = 0\n                    for (s in 1:length(plotat.short)){\n                      segments(y0=plotat.short[s],x0=c(rbind(theta_matSS_q1,SScomp_q1))[s],\n                               y1=plotat.short[s],x1=c(rbind(theta_matSS_q2,SScomp_q2))[s],col=\"black\",\n                               lty=ifelse((s-1)%%3<2,1,1))\n                      if ((s-1)%%3>=1){\n                        counter=counter+1\n                        text(c(SScomp)[counter],plotat.short[s]+0.125,\n                             paste0(round(100*c(SScomp),1)[counter],\"%\"),srt=srtval,cex=cexval)\n                      }\n                    }\n\n                    for (s in 1:JSS){\n                      text(theta_meanSS[s],plotat.short[3*s-2]+.125,paste(round(100*theta_meanSS[s],2),\"%\"))\n\n                      # put prior shapes on gold sensitivity\n                      tmp = rbeta(10000,alphaS[s],betaS[s])\n                      boxplot(tmp,at = ind.SS[s]-0.45, boxwex=1/8 ,col=\"gray\",\n                              add=TRUE,horizontal=TRUE,outline=FALSE,xaxt=\"n\")\n\n                    }\n\n                    mtext(expression(underline(\"SS\")),line=1,cex=1.8)\n                    par(op)\n                    ## END subplot 2: SS Info--------------------------------------------------\n            }\n\n            ## BEGIN subplot 3: etiology Info -------------------------------------------\n            top=eti_upperlimit#max(pq2BG)\n            dotcolor = \"black\"\n            #op <- par(mar=c(5.1,6,4.1,1.1))\n            op <- par(mar=c(5.1,0,4.1,9))\n            plot(c(pEti_mean_ord),1:(Jfull),\n                 yaxt=\"n\",#xaxt=\"n\",\n                 xlim=c(0,top),ylim=c(0.5,Jfull+0.5),col=c(\"black\"),\n                 ylab=\"\",xlab=\"probability\",\n                 pch=c(20),cex=2)\n            axis(4,at=1:Jfull,labels=pathogens_ord,las=2,cex.axis=1.5)\n            abline(h=seq(1.5,Jfull-.5,by=1),lty=2,lwd=0.5,col=\"blue\")\n            #draw axis within plot:\n            for (s in 1:(Jfull-1)){\n              axis(1, seq(0,1,by=.2), lwd=0,lwd.ticks=1,#labels=rep(\"\",length(seq(0,1,by=.2))),\n                   pos = seq(1.5,Jfull-.5,by=1)[s], cex.axis = 0.8,lty=2,col=\"blue\")\n              # axis(1, seq(0,1,by=.2), lwd=0,lwd.ticks=0,#labels=rep(\"\",length(seq(0,1,by=.2))),\n              #      pos = seq(1.5,Jfull-.5,by=1)[s]+0.3, cex.axis = 0.8,lty=2,col=\"blue\")\n            }\n            points(c(pEti_q1),1:(Jfull),pch=\"|\",cex=1)\n            points(c(pEti_q2),1:(Jfull),pch=\"|\",cex=1)\n            points(c(pEti_innerq1),1:(Jfull),pch=\"[\",cex=1)\n            points(c(pEti_innerq2),1:(Jfull),pch=\"]\",cex=1)\n\n            mtext(expression(underline(hat(pi))),line=1,cex=1.8)\n            #mtext(c(expression(bold(\"--\")),\":prior\",\"-\",\":posterior\"),col=c(\"gray\",\"black\",\"black\",\"black\"),\n            #      adj=c(0,0.1,0.3,0.4),line=.8,cex=.8,lwd=2)\n            legend(\"topright\",c(\"prior\",\"posterior\"),lty=c(2,1),col=c(\"gray\",\"black\"),\n                   lwd = 4,horiz=TRUE,cex=1,bty=\"n\")\n            pgrid = seq(0,1,by=0.01)\n\n            if (model_options$Eti_prior==\"overall_uniform\"){\n              alpha    <-  rep(1,Jfull)\n            }\n            for (s in 1:(Jfull)){\n              segments(y0=s,x0=c(pEti_q1)[s],y1=s,x1=c(pEti_q2)[s],col=dotcolor)\n              segments(y0=s,x0=c(pEti_innerq1)[s],y1=s,x1=c(pEti_innerq2)[s],col=dotcolor,lwd=2)\n              #text(pmeanBG[s],s+0.25,paste0(round(100*c(pmeanBG),2)[s],\"%\"),srt=srtval,cex=cexval)\n              text(.35,s+0.25,paste0(\"=\",paste0(round(100*c(pEti_mean_ord),1)[s],\"%\")),srt=srtval,cex=2)\n              text(.27,s+0.25,bquote(hat(pi)[.(ord[s])]),srt=srtval,cex=2)\n              #text(top-0.05,s,pathogens[s],cex=.8,srt=srtval)\n              tmp.density = dbeta(pgrid,alpha[ord[s]],sum(alpha[-ord[s]]))\n              points(pgrid,tmp.density/(3*max(tmp.density))+s-0.45,type=\"l\",col=\"gray\",lwd=4,lty=2)\n              ##posterior density\n              tmp.post.density = density(pEti_mat_ord[,s],from=0,to=1)\n              tmp.x = tmp.post.density$x\n              tmp.y = tmp.post.density$y\n              points(tmp.x,tmp.y/(3*max(tmp.y))+s-0.45,col=\"black\",lwd=4,type=\"l\")\n\n            }\n\n            par(op)\n            ## END subplot 3: etiology Info----------------------------------------------\n\n}# END function\n",
    "created" : 1413000027787.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1007623532",
    "id" : "95FAA023",
    "lastKnownWriteTime" : 1412570437,
    "path" : "~/Dropbox/ZW/working_projects/PERCH/R_package/nplcm/R/nplcm_plot_three_panel.R",
    "project_path" : "R/nplcm_plot_three_panel.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}