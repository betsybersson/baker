{
    "contents" : "#' Fitting nested partially-latent class models (lower level)\n#'\n#'\n#' Current implementation use WinBUGS in Windows system\n#' (see readme file for an instruction to install WinBUGS on windows 7 or 8.)\n#' Developer Note (DN):\n#' 1.gold-standard measurements not implemented\n#' 2.need to include Wei's introduction to installing WinBUGS for PQ analysis\n#' 3.need code for borrowing information of TPRs across (pathogens,x_borrow_TPR)\n#' 4.need to build in regression functionality\n#' 5.allowing those pathogens that have only silver-standard measurements.\n#'\n#'\n#'\n#' @param Mobs A list of measurements as model input. The elements of the list should\n#' include (according to \\code{model}) \\code{MBS}, \\code{MSS}, and \\code{MGS}.\n#' Here, \\code{MBS} is a data frame of bronze-standard (BrS) measurements.\n#' Rows are subjects, columns are pathogens targeted in the BrS measurements\n#' (e.g. nasalpharyngeal PCR). These mesaurements have imperfect sensitivity/specificty.\n#' \\code{MSS} is a data frame of silver-standard (SS) measurements. Rows are subjects,\n#'   columns are pathogens targeted in the SS measurements (e.g. blood culture).\n#'   These measurements have perfect specificity but imperfect sensitivity.\n#' \\code{MGS} is a data frame of gold-standard (GS) measurements. Rows are subject,\n#' columns are pathogens targeted in the GS measurements. These measurements\n#' have both perfect sensitivity and perfect specificity.\n#'\n#' @param Y A vector of binary variables specifying the disease status (1 for case;\n#' 0 for control).\n#' @param X A design matrix. For FPR and etiology regressions.\n#' @param model_options A list of model options.\n#'\n#' \\code{M_use} List of measurements to be used in the model;\n#' \\code{k_subclass}The number of nested subclasses. It equals 1 if the\n#' model is plcm; its value will be useful if the model is nplcm.\n#' \\code{TPR_prior} the prior for the measurements used. Its length should be\n#' the same with \\code{M_use};\n#' \\code{Eti_prior} the vector of parameters in etiology prior;\n#' \\code{allowed_list} for the allowed list of pathogen/pathogen combinations infecting\n#' the lung;\n#' \\code{pathogen_list} The complete list of pathogens considered in the analysis.\n#' \\code{pathogen_cat} The two-column dataframe that has category of pathogens: virus (V), bacteria (B)\n#' and fungi (F)\n#'\n#'\n#' @param mcmc_options A list of Markov chain Monte Carlo related options.\n#'\n#' \\code{debugstatus} for whether to stop WinBUGS window after it finishes Gibbs sampling;\n#' \\code{n.chains} for the number of MCMC chains;\n#' \\code{n.burnin} for the number of burn-in samples;\n#' \\code{n.thin} keep every other n.thin samples after burn-in period;\n#' \\code{individual.pred} whether to perform individual prediction;\n#' \\code{ppd} whether to perform posterior predictive checking\n#' \\code{result.folder} for the path to folder storing the results;\n#' \\code{bugsmodel.dir} for the directory to WinBUGS model files;\n#' \\code{winbugs.dir} for the directory where software WinBUGS 1.4 is installed.\n\n#' @return A WinBUGS result, fitted by function \\code{bugs()} from the R2WinBUGS package.\n#'\n#' @export\n#'\nnplcm_fit<-function(Mobs,Y,X,model_options,mcmc_options){#BEGIN function\n#define the generic function to call WinBUGS:\n    call.bugs <- function(data, inits, parameters,m.file,\n                          bugsmodel.dir = mcmc_options$bugsmodel.dir,\n                          winbugs.dir   = mcmc_options$winbugs.dir,\n                          nitermcmc     = mcmc_options$n.itermcmc,\n                          nburnin       = mcmc_options$n.burnin,\n                          nthin         = mcmc_options$n.thin,\n                          nchains       = mcmc_options$n.chains,\n                          dic = FALSE, is.debug = mcmc_options$debugstatus,\n                          workd=result.folder,...) {\n\n              m.file <- paste(bugsmodel.dir, m.file, sep=\"\");\n              f.tmp <- function() {\n                ##winbugs\n                gs <- bugs(data, inits, parameters,\n                           model.file = m.file,\n                           working.directory=workd,\n                           n.chains = nchains,\n                           n.iter   = nitermcmc,\n                           n.burnin = nburnin,\n                           n.thin   = nthin,\n                           bugs.directory=winbugs.dir,\n                           DIC=dic,\n                           debug=is.debug,...);\n\n                gs;\n              }\n\n              bugs.try  <- try(rst.bugs <- f.tmp(), silent=FALSE);\n              if (class(bugs.try) == \"try-error\") {\n                rst.bugs <- NULL;\n              }\n              rst.bugs;\n    }\n\n#check sources of measurement data:\n      data_source        <- c(\"yes\",\"no\")[is.na(Mobs)+1]\n      names(data_source) <- names(Mobs)\n      cat(\"Available measurements: \\n\")\n      print(data_source)\n\n#compatibility checking:\n      if (length(model_options$M_use)!=length(model_options$TPR_prior)){\n          stop(\"The number of measurement source(s) is different from\n               the number of TPR prior option!\n               Make them equal, and match with order!\")\n      }\n\n#some data preparation:\n      Nd <- sum(Y==1)\n      Nu <- sum(Y==0)\n\n      model_data_source <- rep(NA,3)\n      names(model_data_source) <- c(\"MBS\",\"MSS\",\"MGS\")\n      model_data_source[1] <- c(\"no\",\"yes\")[\"BrS\"%in%model_options$M_use+1]\n      model_data_source[2] <- c(\"no\",\"yes\")[\"SS\"%in%model_options$M_use+1]\n      model_data_source[3] <- c(\"no\",\"yes\")[\"GS\"%in%model_options$M_use+1]\n\n      cat(\"Actual measurements used in the model: \\n\")\n      print(model_data_source)\n\n      cat(\"True positive rate (TPR) prior(s) for \",\n          c(\"MBS\",\"MSS\",\"MGS\")[model_data_source==\"yes\"],\"\\n\",\n             \" is(are respectively) \", model_options$TPR_prior,\"\\n\")\n\n      allowed_list <- model_options$allowed_list\n      pathogen_list <-model_options$pathogen_list\n\n      Jfull         <- length(pathogen_list)\n      Jallowed      <- length(allowed_list)\n      template <-  as.matrix(rbind(symb2I(allowed_list,\n                                          pathogen_list),rep(0,Jfull)))\n\n# BEGIN fit model -------------------------------------------------------------\n      if (model_options$k_subclass ==1){\n        cat(\"Number of subclasses: \", model_options$k_subclass,\"\\n\")\n        #plcm: conditional independence model\n        #plcm-BrS only:\n        if (model_data_source[1]==\"yes\" &\n              model_data_source[2]==\"no\" &\n                model_data_source[3]==\"no\"){\n\n            MBS.case <- Mobs$MBS[Y==1,]\n            MBS.ctrl <- Mobs$MBS[Y==0,]\n            MBS      <- as.matrix(rbind(MBS.case,MBS.ctrl))\n\n            if (model_options$Eti_prior==\"overall_uniform\"){\n               alpha    <-  rep(1,Jfull)\n            }\n            TPR_prior_list <- TPR_prior_set(model_options)\n\n            alphaB <- TPR_prior_list$alphaB\n            betaB <- TPR_prior_list$betaB\n\n            mybugs <- function(...){\n                  inits      <- function(){list(thetaBS = rbeta(Jfull,1,1),\n                                                psiBS   = rbeta(Jfull,1,1))};\n                  data       <- c(\"Nd\",\"Nu\",\"Jfull\",\"Jallowed\",\"alpha\",\n                                  \"template\",\"MBS\",\"alphaB\",\"betaB\");\n\n                  if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==TRUE){\n                      parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\",\"MBS.new\");\n\n                  } else if(mcmc_options$individual.pred==TRUE & mcmc_options$ppd==TRUE){\n                      parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\",\"Icat\",\"MBS.new\");\n\n                  } else if (mcmc_options$individual.pred==TRUE & mcmc_options$ppd==FALSE){\n                      parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\",\"Icat\");\n\n                  } else if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==FALSE){\n                     parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\");\n\n                  }\n                  rst.bugs   <- call.bugs(data, inits, parameters,...);\n                  rst.bugs\n            }\n\n            if (mcmc_options$ppd==TRUE){\n                gs <- mybugs(\"model_plcm_brsonly_ppd.bug\")\n            } else {\n                gs <- mybugs(\"model_plcm_brsonly.bug\")\n            }\n        }\n\n        ##plcm-BrS + SS:\n        if (model_data_source[1]==\"yes\" &\n              model_data_source[2]==\"yes\" &\n                model_data_source[3]==\"no\"){\n\n              MBS.case <- Mobs$MBS[Y==1,]\n              MBS.ctrl <- Mobs$MBS[Y==0,]\n              MBS      <- as.matrix(rbind(MBS.case,MBS.ctrl))\n\n              MSS.case <- Mobs$MSS[Y==1,]\n              MSS.case <- as.matrix(MSS.case)\n\n              SS_index <- which(colMeans(is.na(MSS.case))<0.9)#.9 is arbitrary; any number <1 will work.\n              JSS      <- length(SS_index)\n              MSS      <- MSS.case[,SS_index]\n\n              if (model_options$Eti_prior==\"overall_uniform\"){\n                alpha    <-  rep(1,Jfull)\n              }\n\n              TPR_prior_list <- TPR_prior_set(model_options)\n\n              alphaB <- TPR_prior_list$alphaB\n              betaB <- TPR_prior_list$betaB\n              alphaS <- TPR_prior_list$alphaS\n              betaS <- TPR_prior_list$betaS\n\n              mybugs <- function(...){\n                    inits      <- function(){list(thetaBS = rbeta(Jfull,1,1),\n                                                  psiBS   = rbeta(Jfull,1,1))};\n                    data       <- c(\"Nd\",\"Nu\",\"Jfull\",\"Jallowed\",\"alpha\",\"template\",\n                                    \"MBS\",\"JSS\",\"MSS\",\n                                    \"alphaB\",\"betaB\",\"alphaS\",\"betaS\");\n\n                    if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==TRUE){\n                      parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\",\"thetaSS\",\"MBS.new\");\n\n                    } else if(mcmc_options$individual.pred==TRUE & mcmc_options$ppd==TRUE){\n                      parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\",\"thetaSS\",\"Icat\",\"MBS.new\")\n\n                    } else if (mcmc_options$individual.pred==TRUE & mcmc_options$ppd==FALSE){\n                      parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\",\"thetaSS\",\"Icat\")\n\n                    } else if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==FALSE){\n                      parameters <- c(\"thetaBS\",\"psiBS\",\"pEti\",\"thetaSS\")\n\n                    }\n                    rst.bugs   <- call.bugs(data, inits, parameters,...);\n                    rst.bugs\n              }\n\n              if (mcmc_options$ppd==TRUE){\n                gs <- mybugs(\"model_plcm_ppd.bug\")\n              } else {\n                gs <- mybugs(\"model_plcm.bug\")\n              }\n        }\n\n      }else{\n        #nplcm: conditional dependence model\n        cat(\"Number of subclasses: \", model_options$k_subclass,\"\\n\")\n        # nplcm: BrS only:\n        if (model_data_source[1]==\"yes\" &\n              model_data_source[2]==\"no\" &\n                model_data_source[3]==\"no\"){\n\n          MBS.case <- Mobs$MBS[Y==1,]\n          MBS.ctrl <- Mobs$MBS[Y==0,]\n          MBS      <- as.matrix(rbind(MBS.case,MBS.ctrl))\n\n          K        <- model_options$k_subclass\n\n          if (model_options$Eti_prior==\"overall_uniform\"){\n            alpha    <-  rep(1,Jfull)\n          }\n          TPR_prior_list <- TPR_prior_set(model_options)\n\n          alphaB <- TPR_prior_list$alphaB\n          betaB <- TPR_prior_list$betaB\n\n          mybugs <- function(...){\n                  inits      <- function(){list(pEti = rep(1/Jallowed,Jallowed),\n                                                r0 = c(rep(.5,K-1),NA),\n                                                r1 = cbind(matrix(rep(.5,Jfull*(K-1)),\n                                                                  nrow=Jfull,ncol=K-1),\n                                                           rep(NA,Jfull)),\n                                                alphadp0 = 1)};\n                  data       <- c(\"Nd\",\"Nu\",\"Jfull\",\"Jallowed\",\n                                  \"alpha\",\"template\",\"K\",\n                                  \"MBS\",\"alphaB\",\"betaB\");\n\n                  if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==TRUE){\n                    parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\"MBS.new\",\n                                    \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                                    \"ThetaBS\",\"PsiBS\")\n\n                  } else if(mcmc_options$individual.pred==TRUE & mcmc_options$ppd==TRUE){\n                    parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\"Icat\",\"MBS.new\",\n                                    \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                                    \"ThetaBS\",\"PsiBS\")\n\n                  } else if (mcmc_options$individual.pred==TRUE & mcmc_options$ppd==FALSE){\n                    parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\"Icat\",\n                                    \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                                    \"ThetaBS\",\"PsiBS\")\n\n                  } else if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==FALSE){\n                    parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\n                                    \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                                    \"ThetaBS\",\"PsiBS\")\n\n                  }\n                  rst.bugs   <- call.bugs(data, inits, parameters,...);\n                  rst.bugs\n          }\n\n          if (mcmc_options$ppd==TRUE){\n            gs <- mybugs(\"model_nplcm_brsonly_ppd.bug\")\n          } else {\n            gs <- mybugs(\"model_nplcm_brsonly.bug\")\n          }\n        }\n\n\n        ## nplcm: BrS + SS:\n        if (model_data_source[1]==\"yes\" &\n              model_data_source[2]==\"yes\" &\n                model_data_source[3]==\"no\"){\n\n          MBS.case <- Mobs$MBS[Y==1,]\n          MBS.ctrl <- Mobs$MBS[Y==0,]\n          MBS      <- as.matrix(rbind(MBS.case,MBS.ctrl))\n\n          MSS.case <- Mobs$MSS[Y==1,]\n          MSS.case <- as.matrix(MSS.case)\n\n          SS_index <- which(colMeans(is.na(MSS.case))<0.9)#.9 is arbitrary; any number <1 will work.\n          JSS      <- length(SS_index)\n          MSS      <- MSS.case[,SS_index]\n\n          K        <- model_options$k_subclass\n\n          if (model_options$Eti_prior==\"overall_uniform\"){\n            alpha    <-  rep(1,Jfull)\n          }\n\n          TPR_prior_list <- TPR_prior_set(model_options)\n\n          alphaB <- TPR_prior_list$alphaB\n          betaB <- TPR_prior_list$betaB\n          alphaS <- TPR_prior_list$alphaS\n          betaS <- TPR_prior_list$betaS\n\n          mybugs <- function(...){\n            inits      <- function(){list(pEti = rep(1/Jallowed,Jallowed),\n                                          r0 = c(rep(.5,K-1),NA),\n                                          r1 = cbind(matrix(rep(.5,Jfull*(K-1)),\n                                                            nrow=Jfull,ncol=K-1),\n                                                     rep(NA,Jfull)),\n                                          alphadp0 = 1)};\n            data       <- c(\"Nd\",\"Nu\",\"Jfull\",\"Jallowed\",\n                            \"alpha\",\"template\",\"K\",\n                            \"JSS\",\"MSS\",\n                            \"MBS\",\"alphaB\",\"betaB\",\"alphaS\",\"betaS\");\n\n            if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==TRUE){\n              parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\"MBS.new\",\n                              \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                              \"ThetaBS\",\"PsiBS\",\"thetaSS\")\n\n            } else if(mcmc_options$individual.pred==TRUE & mcmc_options$ppd==TRUE){\n              parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\"Icat\",\"MBS.new\",\n                              \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                              \"ThetaBS\",\"PsiBS\",\"thetaSS\")\n\n            } else if (mcmc_options$individual.pred==TRUE & mcmc_options$ppd==FALSE){\n              parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\"Icat\",\n                              \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                              \"ThetaBS\",\"PsiBS\",\"thetaSS\")\n\n            } else if (mcmc_options$individual.pred==FALSE & mcmc_options$ppd==FALSE){\n              parameters <- c(\"pEti\",\"Lambda\",\"Eta\",\"alphadp0\",\n                              \"ThetaBS.marg\",\"PsiBS.marg\",\"PsiBS.case\",\n                              \"ThetaBS\",\"PsiBS\",\"thetaSS\")\n\n            }\n            rst.bugs   <- call.bugs(data, inits, parameters,...);\n            rst.bugs\n          }\n\n          if (mcmc_options$ppd==TRUE){\n            gs <- mybugs(\"model_nplcm_ppd.bug\")\n          } else {\n            gs <- mybugs(\"model_nplcm.bug\")\n          }\n        }\n\n      }\n\n   #END fitting model---------------------------------------------------------\n\n   # return the WinBUGS fitted results:\n   return(gs)\n}#END function\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1412567479459.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3412270441",
    "id" : "52320422",
    "lastKnownWriteTime" : 1412367934,
    "path" : "C:/Users/Administrator/Dropbox/ZW/working_projects/PERCH/R_package/nplcm/R/nplcm_fit.R",
    "project_path" : "R/nplcm_fit.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}