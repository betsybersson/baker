% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/compute_functionals_of_model.R
\name{compute_logOR_single_cause}
\alias{compute_logOR_single_cause}
\title{Calculate marginal log odds ratios}
\usage{
compute_logOR_single_cause(set_parameter)
}
\arguments{
\item{set_parameter}{True model parameters in the npLCM specification}
}
\value{
A figure showing pairwise odds ratios for cases (upper right, solid lines)
and controls (lower left, broken lines) as the first subclass weight increases
from 0 to 1. Pairwise independence is represented by the dotted horizontal lines
for reference.
}
\description{
Calculate marginal log odds ratios
}
\examples{
\dontrun{
K.true  <- 2   # no. of latent subclasses in actual simulation.
               # If eta = c(1,0), effectively, it is K.true=1
J       <- 5   # no. of pathogens.
N       <- 500 # no. of cases/controls.

col_seq_cause <-  c("#DB9D85","#A2B367","#47BEA2","#70B3DA","#CD99D8")
          #colorspace::rainbow_hcl(5, start = 30, end = 300)

subclass_mix_seq <- seq(0,1,by=0.05)
res      <- array(NA,c(J,J,length(subclass_mix_seq)))
res_cond <- array(NA,c(J,J,length(subclass_mix_seq),J))

for (scn in c(1,2,3)){
  for (iter in seq_along(subclass_mix_seq)){
    curr_mix <- subclass_mix_seq[iter]
    lambda <- c(curr_mix,1-curr_mix)
    eta    <- c(curr_mix,1-curr_mix)
    # if it is c(1,0),then it is conditional independence model, and
    # only the first column of parameters in PsiBS, ThetaBS matter!

    seed_start <- 20150923

    # set fixed simulation sequence:
    set.seed(seed_start)

    if (scn == 1){
      ThetaBS_withNA <- cbind(c(0.95,0.9,0.1,0.5,0.5),
                              c(0.95,0.1,0.9,0.5,0.5))
      PsiBS_withNA   <- cbind(c(0.4,0.4,0.05,0.2,0.2),
                              c(0.05,0.05,0.4,0.05,0.05))
    }

    if (scn == 2){
      ThetaBS_withNA <- cbind(c(0.95,0.5,0.5,0.5,0.5),
                              c(0.95,0.5,0.5,0.5,0.5))
      PsiBS_withNA   <- cbind(c(0.4,0.4,0.05,0.2,0.2),
                              c(0.05,0.05,0.4,0.05,0.05))
    }

    if (scn == 3){
      ThetaBS_withNA <- cbind(c(0.95,0.5,0.5,0.5,0.5),
                              c(0.95,0.5,0.5,0.5,0.5))
      PsiBS_withNA   <- cbind(c(0.3,0.3,0.15,0.2,0.2),
                              c(0.15,0.15,0.3,0.05,0.05))
    }

    set_parameter0 <- list(
      cause_list      = c(LETTERS[1:J]),
      etiology        = rep(0.2,J), #same length as cause_list
      pathogen_BrS    = LETTERS[1:J],
      meas_nm         = list(MBS = c("MBS1")),
      Lambda          = lambda,              #ctrl mix
      Eta             = t(replicate(J,eta)), #case mix, row number = Jcause.
      PsiBS           = PsiBS_withNA,
      ThetaBS         = ThetaBS_withNA,
      Nu      =     N, # control size.
      Nd      =     N  # case size.
    )

    res[,,iter] <- round(compute_logOR_single_cause(set_parameter0),2)

    for (pick in 1:J){
      set_parameter <- set_parameter0
      set_parameter$ThetaBS <- set_parameter0$PsiBS
      set_parameter$ThetaBS[pick,] <- set_parameter0$ThetaBS[pick,]
      set_parameter$etiology <- rep(0,J); set_parameter$etiology[pick] <- 1
      res_cond[,,iter,pick] <- round(compute_logOR_single_cause(set_parameter),2)
    }
  }

  par(mfrow=c(J,J));

  par(mar=c(0,0,0,0));
  par(oma=c(6,6,3,3));

  ind <- which(seq_along(subclass_mix_seq)\%\%4==1)
  logOR_lim <- c(-2.15,2.15)
  col_seq <- c("dodgerblue2","orange")
  logOR_seq <- log(c(0.25,0.5,1,2,4))
  for (j in 1:J){
    for (l in 1:J){
      if (!(j==l)){
        plot(res[j,l,],type="l",xlab="",ylab="",
             ylim=logOR_lim, lwd=5,
             xaxt="n",yaxt="n",
             col=col_seq[1+(l>j)],lty=c(2,1)[1+(l>j)])
        abline(h=0,col="black",lwd=3,lty=3)

        if (j<l){
          matplot(res_cond[j,l,,],type="l",add=TRUE,pch=LETTERS[1:J],
                  lwd=2,lty=2,
                  col=col_seq_cause)
        }
        lab_ord <- c(j,l); if (j>l){lab_ord <- rev(lab_ord)}
        mtext(paste0("(",set_parameter$pathogen_BrS[lab_ord[1]],",",
                     set_parameter$pathogen_BrS[lab_ord[2]],")"),
              side=3, adj=0.1,line=-2)

        if (l\%\%J==1){#} | (j==1 && l==2)){
          axis(2,at = logOR_seq,
               labels = round(exp(logOR_seq),1),
               las=2)
        }
        if (l\%\%J==0){
          axis(4,at = logOR_seq,
               labels = round(exp(logOR_seq),1),
               las=2)

        }
        if (j==J){
          axis(1,at=seq_along(subclass_mix_seq)[ind],
             labels=subclass_mix_seq[ind])
        }
        if (j==1){
          axis(3,at=seq_along(subclass_mix_seq)[ind],
             labels=subclass_mix_seq[ind])
        }
      }else{

        plot(1, type="n", axes=F, xlab="", ylab="")
        rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col =
               "gray86")
      }
    }
  }

  mtext(expression(paste("First Subclass Weight (",lambda[o],")")),
         side = 1,4,outer=TRUE,cex = 1.5)
  mtext("Odds Ratio (log-scale)", side = 2, 4, outer=TRUE,cex=1.5)
  #dev.off()
}
}
}

