MeasDir            = paste0(working_dir,"package_test/PERCH_data_with_newSITE.csv"),
PathCatDir         = paste0(working_dir,"package_test/pathogen_category.csv"),
allow_missing      = TRUE)
cleaned_data <- perch_data_clean(clean_options)
## get cleaned data by name:
Mobs      <- cleaned_data$Mobs
Y         <- cleaned_data$Y
X         <- cleaned_data$X
pathogen_cat <- cleaned_data$pathogen_cat
JSS          <- cleaned_data$JSS
pathogen_SSonly_cat<- cleaned_data$pathogen_SSonly_cat
JSSonly <- cleaned_data$JSSonly
pathogen_BrS <- cleaned_data$pathogen_MSS_ordered
# END: Get Data.
##=======================================================================##
##=======================================================================##
## Fit model:
# specify model fitting options (see nplcm function for details):
model_options <- list(M_use = c("BrS","SS"),
# has to be a subset of non-NA entries in Mobs.
k_subclass = 1,
TPR_prior  = c("informative","informative"),
#same length as M_use.
Eti_prior  = "overall_uniform",
pathogen_BrS_list = pathogen_BrS,
cause_list  = cause_list,
X_reg_FPR = NULL,
X_reg_Eti = NULL, #change the FPR_regression, and Eti_regressions to NULL values.
pathogen_cat = pathogen_cat,
pathogen_SSonly_list = pathogen_SSonly,
pathogen_SSonly_cat  = pathogen_SSonly_cat)
Date     <- gsub("-", "_", Sys.Date())
fname    <- paste0(working_dir,Date,"_",sitename,"")
dir.create(fname)
fullname <- fname
## for finer scenarios
result.folder <- fullname
dir.create(result.folder)
# options for MCMC chains:
mcmc_options <- list(debugstatus = !TRUE,
n.chains   = 1,
n.itermcmc = 100,
n.burnin   = 0,
n.thin     = 1,
individual.pred = TRUE,
ppd             = !TRUE,
result.folder = result.folder,
bugsmodel.dir = "C:\\winbugs_model_package\\",
winbugs.dir   = "C:\\Program Files\\WinBUGS14\\")
## record settings of current analysis-----------------------------------
cat("==Results stored in: ==","\n",result.folder)
#data clean options:
dput(clean_options,paste0(mcmc_options$result.folder,"\\data_clean_options.txt"))
#model_options:
dput(model_options,paste0(mcmc_options$result.folder,"\\model_options.txt"))
#mcmc_options:
dput(mcmc_options,paste0(mcmc_options$result.folder,"\\mcmc_options.txt"))
##=======================================================================##
# Exploratory Data Analysis
DIR_pathogen_displayorder_lookup <- "C:/package_test/pathogen_displayorder_lookup.csv"
pathogen_displayorder_lookup <- read.csv(DIR_pathogen_displayorder_lookup)
f <- pathogen_displayorder_lookup$Pathogen
display_order <- as.character(levels(f))[f]
eda_options <- list(X_names     = list("site"),
X_values    = list(sitename),
# for plotting title on top of the figure.
total_positives = !TRUE,
bubble_plot  = TRUE)
#correlation structure:
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
library(nplcm)
rm(list=ls())
# DN: 1.check simulation study compatibility
#     2.posterior-predictive checking procedure
#      separate: marginal, pairwise associations
#      combined:
## only need to run once:
# install.packages("lubridate")
# install.packages("sets")
# install.packages("R2WinBUGS")
# install.packages("gplots")
# install.packages("RColorBrewer")
# install.packages("binom")
# install.packages("coda")
# install.packages("ks")
# install.packages("robCompositions")
## essential packages for building R packages:
# install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# devtools::install_github("hadley/devtools")
# library(devtools)
# has_devel()
library(lubridate)
library(sets)
library(R2WinBUGS)
library(gplots)
library(RColorBrewer)
library(binom)
library(coda)
library(nplcm)
# for plot group etiologies posteriors:
library(ks)
library(robCompositions)
##=======================================================================##
# Get Data:
newALLSITES           <- c("01KEN","02GAM","03MAL","04ZAM",
"05SAF","06THA","07BAN")
current_study_site    <- 2
sitename              <- newALLSITES[current_study_site]
pathogen_BrS_anyorder  <- c("HINF","MCAT","PNEU_VT13","PNEU_NOVT13",
"SASP","SAUR",#with BCX measures.
"BOPE","C_PNEU","M_PNEU",
"PCP",# bacteria or fungus up to now.
"ADENO","CMV","COR",#WF
"FLU_C","HBOV","HMPV_A_B",
"FLU_A","FLU_B",
"PARA_1","PARA_2","PARA_3","PARA_4",
"PV_EV","RHINO","RSV")
pathogen_SSonly       <- c("ENTRB","NFGNR","FUNGI","HAEMO","OTHSTR","NMEN","TB")
# the list of causes, can be singleton, NOA, or combinations:
cause_list  <- c(pathogen_BrS_anyorder, # singleton causes in pathogen_BrS_avail.
pathogen_SSonly,    # singleton causes in pathogen_SSonly.
"RHINO+RSV", "RSV+NFGNR", # any combinations
"NoA")# always specify "NOA" last if it goes into model.
# parent directory where code testing occurs:
working_dir <- "C:/"
## clean PERCH data:
clean_options <- list (case_def           =  "CXRFINCAT_5",
case_def_val       =  1,
ctrl_def           =  "CASECONT",
ctrl_def_val       =  2,
X_strat            =  "newSITE",
X_strat_val        =  list(sitename),
pathogen_BrS       =  pathogen_BrS_anyorder,# any order.
pathogen_SSonly    =  pathogen_SSonly,
# covariates besides case/control:
X_extra            = c("newSITE","ENRLDATE","patid","AGECAT","HIV"),
# coverates for separately ordering cases/controls:
X_order_obs        = c("newSITE","ENRLDATE","AGECAT","HIV"),
RawMeasDir         = paste0(working_dir,"package_test/PQ_29NOV14.csv"),
write_newSite      = TRUE,
newSite_write_Dir  = paste0(working_dir,"package_test/PERCH_data_with_newSITE.csv"),
MeasDir            = paste0(working_dir,"package_test/PERCH_data_with_newSITE.csv"),
PathCatDir         = paste0(working_dir,"package_test/pathogen_category.csv"),
allow_missing      = TRUE)
cleaned_data <- perch_data_clean(clean_options)
## get cleaned data by name:
Mobs      <- cleaned_data$Mobs
Y         <- cleaned_data$Y
X         <- cleaned_data$X
pathogen_cat <- cleaned_data$pathogen_cat
JSS          <- cleaned_data$JSS
pathogen_SSonly_cat<- cleaned_data$pathogen_SSonly_cat
JSSonly <- cleaned_data$JSSonly
pathogen_BrS <- cleaned_data$pathogen_MSS_ordered
# END: Get Data.
##=======================================================================##
##=======================================================================##
## Fit model:
# specify model fitting options (see nplcm function for details):
model_options <- list(M_use = c("BrS","SS"),
# has to be a subset of non-NA entries in Mobs.
k_subclass = 1,
TPR_prior  = c("informative","informative"),
#same length as M_use.
Eti_prior  = "overall_uniform",
pathogen_BrS_list = pathogen_BrS,
cause_list  = cause_list,
X_reg_FPR = NULL,
X_reg_Eti = NULL, #change the FPR_regression, and Eti_regressions to NULL values.
pathogen_cat = pathogen_cat,
pathogen_SSonly_list = pathogen_SSonly,
pathogen_SSonly_cat  = pathogen_SSonly_cat)
Date     <- gsub("-", "_", Sys.Date())
fname    <- paste0(working_dir,Date,"_",sitename,"")
dir.create(fname)
fullname <- fname
## for finer scenarios
result.folder <- fullname
dir.create(result.folder)
# options for MCMC chains:
mcmc_options <- list(debugstatus = !TRUE,
n.chains   = 1,
n.itermcmc = 100,
n.burnin   = 0,
n.thin     = 1,
individual.pred = TRUE,
ppd             = !TRUE,
result.folder = result.folder,
bugsmodel.dir = "C:\\winbugs_model_package\\",
winbugs.dir   = "C:\\Program Files\\WinBUGS14\\")
## record settings of current analysis-----------------------------------
cat("==Results stored in: ==","\n",result.folder)
#data clean options:
dput(clean_options,paste0(mcmc_options$result.folder,"\\data_clean_options.txt"))
#model_options:
dput(model_options,paste0(mcmc_options$result.folder,"\\model_options.txt"))
#mcmc_options:
dput(mcmc_options,paste0(mcmc_options$result.folder,"\\mcmc_options.txt"))
## END recording settings of current analysis-------------------------------
##=======================================================================##
# Exploratory Data Analysis
DIR_pathogen_displayorder_lookup <- "C:/package_test/pathogen_displayorder_lookup.csv"
pathogen_displayorder_lookup <- read.csv(DIR_pathogen_displayorder_lookup)
f <- pathogen_displayorder_lookup$Pathogen
display_order <- as.character(levels(f))[f]
eda_options <- list(X_names     = list("site"),
X_values    = list(sitename),
# for plotting title on top of the figure.
total_positives = !TRUE,
bubble_plot  = TRUE)
#correlation structure:
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
# END: Exploratory Data Analysis
##=======================================================================##
par("mar")
par()$mar
#correlation structure:
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(mar=par()$oma+c(0,2,0,0))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
?par
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,3,0,0))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,4,0,0))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
library(nplcm)
rm(list=ls())
# DN: 1.check simulation study compatibility
#     2.posterior-predictive checking procedure
#      separate: marginal, pairwise associations
#      combined:
## only need to run once:
# install.packages("lubridate")
# install.packages("sets")
# install.packages("R2WinBUGS")
# install.packages("gplots")
# install.packages("RColorBrewer")
# install.packages("binom")
# install.packages("coda")
# install.packages("ks")
# install.packages("robCompositions")
## essential packages for building R packages:
# install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# devtools::install_github("hadley/devtools")
# library(devtools)
# has_devel()
library(lubridate)
library(sets)
library(R2WinBUGS)
library(gplots)
library(RColorBrewer)
library(binom)
library(coda)
library(nplcm)
# for plot group etiologies posteriors:
library(ks)
library(robCompositions)
##=======================================================================##
# Get Data:
newALLSITES           <- c("01KEN","02GAM","03MAL","04ZAM",
"05SAF","06THA","07BAN")
current_study_site    <- 2
sitename              <- newALLSITES[current_study_site]
pathogen_BrS_anyorder  <- c("HINF","MCAT","PNEU_VT13","PNEU_NOVT13",
"SASP","SAUR",#with BCX measures.
"BOPE","C_PNEU","M_PNEU",
"PCP",# bacteria or fungus up to now.
"ADENO","CMV","COR",#WF
"FLU_C","HBOV","HMPV_A_B",
"FLU_A","FLU_B",
"PARA_1","PARA_2","PARA_3","PARA_4",
"PV_EV","RHINO","RSV")
pathogen_SSonly       <- c("ENTRB","NFGNR","FUNGI","HAEMO","OTHSTR","NMEN","TB")
# the list of causes, can be singleton, NOA, or combinations:
cause_list  <- c(pathogen_BrS_anyorder, # singleton causes in pathogen_BrS_avail.
pathogen_SSonly,    # singleton causes in pathogen_SSonly.
"RHINO+RSV", "RSV+NFGNR", # any combinations
"NoA")# always specify "NOA" last if it goes into model.
# parent directory where code testing occurs:
working_dir <- "C:/"
## clean PERCH data:
clean_options <- list (case_def           =  "CXRFINCAT_5",
case_def_val       =  1,
ctrl_def           =  "CASECONT",
ctrl_def_val       =  2,
X_strat            =  "newSITE",
X_strat_val        =  list(sitename),
pathogen_BrS       =  pathogen_BrS_anyorder,# any order.
pathogen_SSonly    =  pathogen_SSonly,
# covariates besides case/control:
X_extra            = c("newSITE","ENRLDATE","patid","AGECAT","HIV"),
# coverates for separately ordering cases/controls:
X_order_obs        = c("newSITE","ENRLDATE","AGECAT","HIV"),
RawMeasDir         = paste0(working_dir,"package_test/PQ_29NOV14.csv"),
write_newSite      = TRUE,
newSite_write_Dir  = paste0(working_dir,"package_test/PERCH_data_with_newSITE.csv"),
MeasDir            = paste0(working_dir,"package_test/PERCH_data_with_newSITE.csv"),
PathCatDir         = paste0(working_dir,"package_test/pathogen_category.csv"),
allow_missing      = TRUE)
cleaned_data <- perch_data_clean(clean_options)
## get cleaned data by name:
Mobs      <- cleaned_data$Mobs
Y         <- cleaned_data$Y
X         <- cleaned_data$X
pathogen_cat <- cleaned_data$pathogen_cat
JSS          <- cleaned_data$JSS
pathogen_SSonly_cat<- cleaned_data$pathogen_SSonly_cat
JSSonly <- cleaned_data$JSSonly
pathogen_BrS <- cleaned_data$pathogen_MSS_ordered
# END: Get Data.
##=======================================================================##
##=======================================================================##
## Fit model:
# specify model fitting options (see nplcm function for details):
model_options <- list(M_use = c("BrS","SS"),
# has to be a subset of non-NA entries in Mobs.
k_subclass = 1,
TPR_prior  = c("informative","informative"),
#same length as M_use.
Eti_prior  = "overall_uniform",
pathogen_BrS_list = pathogen_BrS,
cause_list  = cause_list,
X_reg_FPR = NULL,
X_reg_Eti = NULL, #change the FPR_regression, and Eti_regressions to NULL values.
pathogen_cat = pathogen_cat,
pathogen_SSonly_list = pathogen_SSonly,
pathogen_SSonly_cat  = pathogen_SSonly_cat)
Date     <- gsub("-", "_", Sys.Date())
fname    <- paste0(working_dir,Date,"_",sitename,"")
dir.create(fname)
fullname <- fname
## for finer scenarios
result.folder <- fullname
dir.create(result.folder)
# options for MCMC chains:
mcmc_options <- list(debugstatus = !TRUE,
n.chains   = 1,
n.itermcmc = 100,
n.burnin   = 0,
n.thin     = 1,
individual.pred = TRUE,
ppd             = !TRUE,
result.folder = result.folder,
bugsmodel.dir = "C:\\winbugs_model_package\\",
winbugs.dir   = "C:\\Program Files\\WinBUGS14\\")
## record settings of current analysis-----------------------------------
cat("==Results stored in: ==","\n",result.folder)
#data clean options:
dput(clean_options,paste0(mcmc_options$result.folder,"\\data_clean_options.txt"))
#model_options:
dput(model_options,paste0(mcmc_options$result.folder,"\\model_options.txt"))
#mcmc_options:
dput(mcmc_options,paste0(mcmc_options$result.folder,"\\mcmc_options.txt"))
## END recording settings of current analysis-------------------------------
##=======================================================================##
# Exploratory Data Analysis
DIR_pathogen_displayorder_lookup <- "C:/package_test/pathogen_displayorder_lookup.csv"
pathogen_displayorder_lookup <- read.csv(DIR_pathogen_displayorder_lookup)
f <- pathogen_displayorder_lookup$Pathogen
display_order <- as.character(levels(f))[f]
eda_options <- list(X_names     = list("site"),
X_values    = list(sitename),
# for plotting title on top of the figure.
total_positives = !TRUE,
bubble_plot  = TRUE)
#correlation structure:
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,4,0,0))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
library(nplcm)
library(nplcm)
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,4,0,0))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
library(nplcm)
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,10,0,0))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,10,0,0))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,10,0,10))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=10, width=10)
par(oma=par()$oma+c(0,10,0,10))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
#correlation structure:
pdf(paste0(mcmc_options$result.folder,"/logOR_bubble_plot.pdf"),
height=20, width=20)
par(oma=par()$oma+c(0,10,0,10))
eda(Mobs, Y, X, eda_options,display_order,pathogen_BrS)
dev.off()
library(nplcm)
library(nplcm)
library(nplcm)
logORmat
?logORmat
library(nplcm)
library(nplcm)
library(nplcm)
nrow = 8
ncol = 10
par(mfrow=c(nrow,ncol))
for (i in 1:(nrow*ncol)){
random_numbers <- rnorm(1000,0,1)
hist(random_numbers)
}
nrow = 8
ncol = 10
par(mfrow=c(nrow,ncol))
for (i in 1:(nrow*ncol)){
random_numbers <- rnorm(1000,0,1)
hist(random_numbers)
}
nrow = 8
ncol = 10
par(mfrow=c(nrow,ncol))
for (i in 1:(nrow*ncol)){
random_numbers <- rnorm(1000,0,1)
hist(random_numbers)
}
nrow = 8
ncol = 10
par(mfrow=c(nrow,ncol))
for (i in 1:(nrow*ncol)){
random_numbers <- rnorm(1000,0,1)
hist(random_numbers)
}
getwd()
nrow = 8
ncol = 10
pdf("C:/figure.pdf",width=20,height=20)
par(mfrow=c(nrow,ncol))
for (i in 1:(nrow*ncol)){
random_numbers <- rnorm(1000,0,1)
hist(random_numbers)
}
dev.off()
install.packages("roxygen2")
library(roxygen2)
library(nplcm)
library(nplcm)
library(nplcm)
library(nplcm)
library(nplcm)
?sort_data_frame
library(nplcm)
library(nplcm)
devtools::check()
library(nplcm)
library(nplcm)
?ternaryDiag
?Hpi
?binom.confint
?as.set
?as.set
?importFrom
?as.set
install.packages("R2WinBUGS")
install.packages("lubridate")
install.packages("sets")
install.packages("binom")
install.packages("coda")
install.packages("ks")
install.packages("robCompositions")
install.packages("ggplot2")
install.packages("devtools")
install.packages("roxygen2")
install.packages("ks")
library(ks)
install.packages(ls)
install.packages(ks)
install.packages("ks")
library(ks)
install.packages("rgl")
library(ks)
library(rgl)
install.packages("rgl")
library(rgl)
library(ks)
library("ks", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(rgl)
library(ks)
library(rgl)
